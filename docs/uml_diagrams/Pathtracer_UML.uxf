<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.3.0">
  <zoom_level>2</zoom_level>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>458</x>
      <y>326</y>
      <w>82</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>style=autoresize
*Tuple*
--
+ x : double
+ y : double
+ z : double
--
# &lt;&lt;constructor&gt;&gt; Tuple (x : double, y : double, z : double)

# &lt;&lt;destructor&gt;&gt; Tuple ()</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>404</x>
      <y>388</y>
      <w>82</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>style=autoresize
*Point*
--
+ &lt;&lt;constructor&gt;&gt; Point (x : double, y : double, z : double)
+ &lt;&lt;constructor&gt;&gt; Point (t : const Tuple&amp;)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>444</x>
      <y>356</y>
      <w>42</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>190.0;10.0;190.0;100.0;10.0;100.0;10.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>514</x>
      <y>388</y>
      <w>94</w>
      <h>34</h>
    </coordinates>
    <panel_attributes>style=autoresize
*Vector*
--
+ &lt;&lt;constructor&gt;&gt; Vector (x : double, y : double, z : double)
+ &lt;&lt;constructor&gt;&gt; Vector (t : const Tuple&amp;)
+ &lt;&lt;constructor&gt;&gt; Vector (start : const Tuple&amp;, end : const Tuple&amp;)

+ length () : double {query}
+ scale (k : double) : void
+ normalize () : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>514</x>
      <y>356</y>
      <w>48</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;100.0;220.0;100.0;220.0;160.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>660</x>
      <y>316</y>
      <w>280</w>
      <h>174</h>
    </coordinates>
    <panel_attributes>halign=left
*render*
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>398</x>
      <y>384</y>
      <w>96</w>
      <h>34</h>
    </coordinates>
    <panel_attributes>lt=.
valign=bottom
halign=left

distance (p1 : const Point&amp;, p2 : const Point&amp;) : double
distance_squared (p1 : const Point&amp;, p2 : const Point&amp;) : double</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>508</x>
      <y>384</y>
      <w>106</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=.
valign=bottom
halign=left

add (v1 : const Vector&amp;, v2 : const Vector&amp;) : Vector
subtract (v1 : const Vector&amp;, v2 : const Vector&amp;) : Vector
scalar_product (v1 : const Vector&amp;, v2 : const Vector&amp;) : double 
vector_product (v1 : const Vector&amp;, v2 : const Vector&amp;) : Vector
triple_product (v1 : const Vector&amp;, v2 : const Vector&amp;, v3 : const Vector&amp;) : double
angle_between (v1 : const Vector&amp;, v2 : const Vector&amp;) : double</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLNote</id>
    <coordinates>
      <x>86</x>
      <y>294</y>
      <w>230</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>style=autoresize
fontsize=32

This is a UML diagram for the pathtracer project.
It combines class and package diagrams notations in attempt to keep all
necessary information excplicit and to reduce number of diagrams to modify
upon updates.

As for notation, names of the packages should be interpretated as a
namespaces in C++ code.
Classes with stereotype "interface" must be
implemented in C++ as classes with no data members,
containing only pure virtual functions.

Boxes with dashed border shall represent, that helper functions
should be defined and implemented in the same *.h and *.cpp files
as those classes they relate to. That is cause they are part of those interfaces,
but, since there is no need to access implementation detials of the class, 
they are not member functions. If it is just set of functions, then dashed border
suggests that they should be in the same translation unit.

There are two main packages (namespases) - core and custom.
Core namespace contains bare minimum that is required to setup a proper
renderer. Basically, it is a framework of the project, where extension
points are interfaces, that should be specifically implemented.
Custom namespace is the one, where specific implementation is provided 
together with associated utility classes. This allows for the modular approach.

Both core and custom have nested namespaces - geometry, render, optics.
Naturally, those reflect differnt specific domains within modules.

This document was developed using UMLet editor.
Last modified on 21.11.19 by Bondarenko Konstantin
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>398</x>
      <y>430</y>
      <w>100</w>
      <h>32</h>
    </coordinates>
    <panel_attributes>style=autoresize
*Ray*
--
- origin_m : Point
- direction_m : Vector
--
+ &lt;&lt;constructor&gt;&gt; Ray (origin : const Point&amp;, direction : const Vector&amp;)

+ origin () : Point {query}
+ direction () : Vector {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>496</x>
      <y>438</y>
      <w>16</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>60.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>446</x>
      <y>416</y>
      <w>6</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=-&gt;&gt;&gt;&gt;&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>804</x>
      <y>328</y>
      <w>132</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>//style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IPathtracer*/
--
+ trace (scene : const IRaytraceable&amp;,
              current : const std::optional&lt;const std::reference_wrapper&lt;const IRaytraceable&gt; &gt;,
              initial_ray : const Ray&amp;,
              sampler : const ISampler&amp;,
              spectrum_table_size : size_t,
              samples : int,
              depth : int) : Spectrum {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>784</x>
      <y>420</y>
      <w>142</w>
      <h>38</h>
    </coordinates>
    <panel_attributes>style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IRaytraceable*/
--
+ ray_intersection (r : const Ray&amp;) : std::optional&lt;std::tuple&lt;Point,
                                                                                                       const IRaytraceable&amp; &gt; &gt; {query}
                                                                                                       
+ probe_surface_data (r : const Ray&amp;) : std::optional&lt; std::tuple&lt;Point,
                                                                                                              Vector,
                                                                                                              Material,
                                                                                                              const IRaytraceable&amp; &gt; &gt; {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>808</x>
      <y>376</y>
      <w>104</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>//style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*ISampler*/
--
+ generate_sample (reflector : const Reflector&amp;,
                                  normal_towards_incidence : const Vector&amp;,
                                  specular_direction : const Vector&amp;) : Vector {query}

+ generate_sample (transmitter : const Transmitter&amp;,
                                   normal_towards_incidence : const Vector&amp;,
                                   specular_direction : const Vector&amp;) : Vector {query} </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>964</x>
      <y>316</y>
      <w>320</w>
      <h>284</h>
    </coordinates>
    <panel_attributes>valign=bottom
halign=left
*optics*
--
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>980</x>
      <y>538</y>
      <w>120</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>style=autoresize
*Transmitter*
--
- specular_coef_m : double
- diffuse_coef_m : double

- specular_roughness_m : double
--
+ &lt;&lt;constructor&gt;&gt; Transmitter (clearness : double, specular_roughness : double)

+ specular_coef () : double {query}
+ diffuse_coef () : double {query}

+ specular_roughness () : double {query}

+ intensity_coef (normal_angle : double, specular_angle : double) : double {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1130</x>
      <y>402</y>
      <w>118</w>
      <h>86</h>
    </coordinates>
    <panel_attributes>style=autoresize
*Spectrum*
--
_- min_wavelength_s : const double_
_- max_wavelength_s : const double_

- table_m : std::vector&lt;double&gt;
--
+ &lt;&lt;constructor&gt;&gt; Spectrum (table : const std::vector&lt;double&gt;&amp;)
+ &lt;&lt;constructor&gt;&gt; Spectrum (s : const Spectrum&amp;, table_size : size_t)
+ &lt;&lt;constructor&gt;&gt; Spectrum (table : const std::vector&lt;double&gt;&amp;, table_size : size_t)
  
//  ^- this one would be used a lot, but should be implemented as second
//  construcor with Spectrum tmp constructed via first constructor. 
//  This allows for use of interpolated_value() method to refill new table.
//  Otherwise there is no elegant way to implement that.
//
+ min_wavelength () : double {query}
+ max_wavelength () : double {query}

+ table_size () : std::size_t {query}
+ wavelength_step () : double {query}
   
+ value_interpolated (wavelength : double) : double {query}
+ wavelengths () : std::vector&lt;double&gt; {query}
+ integral () : double {query}
+ scale (k : double) : void
+ normalize () : void
+ add (s : const Spectrum&amp;) : void
+ multiply (s : const Spectrum&amp;) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>980</x>
      <y>332</y>
      <w>116</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>//style=autoresize
*Material*
--
- name_m : std::string

- emitter_m : std::optional&lt;Emitter&gt;
- redistributor_m : std::optional&lt;Redistributor&gt;
--
+ &lt;&lt;constructor&gt;&gt; Material (name : const std::string&amp;,
                                            emitter : const std::optional&lt;Emitter&gt;&amp;,
                                            redistributor : const std::optional&lt;Redistributor&gt;&amp;)

+ name () : std::string {query}

+ emitter () : std::optional&lt;Emitter&gt; {query}
+ redistributor () : std::optional&lt;Redistributor&gt; {query}                   </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1116</x>
      <y>538</y>
      <w>120</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>style=autoresize
*Reflector*
--
- specular_coef_m : double
- diffuse_coef_m : double

- specular_roughness_m : double
--
+ &lt;&lt;constructor&gt;&gt; Reflector (gloss : double, specular_roughness : double)

+ specular_coef () : double {query}
+ diffuse_coef () : double {query}

+ specular_roughness () : double {query}

+ intensity_coef (normal_angle : double, specular_angle : double) : double {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>992</x>
      <y>402</y>
      <w>104</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>style=autoresize
*Emitter*
--
- spectrum_m : Spectrum
- spread_m : double
--
+ &lt;&lt;constructor&gt;&gt; Emitter (spectrum : const Spectrum&amp;, spread : double)

+ spectrum () : Spectrum {query}
+ spread () : double {query}

+ intensity_coef (angle : double) : double {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>898</x>
      <y>902</y>
      <w>148</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=.
style=autoresize
--
reflected_reconstruction (core::geometry::Vector incidence_direction,
                                            core::geometry::Vector normal_towards_incidence) : core::geometry::Vector 

transmitted_reconstruction (core::geometry::Vector incidence_direction,
                                                 core::geometry::Vector normal_towards_incidence,
                                                 double beta_angle) : core::geometry::Vector </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>666</x>
      <y>328</y>
      <w>68</w>
      <h>38</h>
    </coordinates>
    <panel_attributes>style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IRenderer*/
--
+ process (pathtracer : const IPathtracer&amp;,
                  scene : const IRaytraceable&amp;,
                  viewport : const IViewport&amp;,
                  sampler : const ISampler&amp;,
                  samples : int,
                  depth : int,
                  image : IImagetile&amp;) : void {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>666</x>
      <y>408</y>
      <w>86</w>
      <h>34</h>
    </coordinates>
    <panel_attributes>style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IImageTile*/
--
+ next_pixel () : std::optional&lt; std::pair &lt;int, int&gt; &gt;  {query}
+ reset () : void
+ pixel (x : int, y : int) : std::optional&lt;Spectrum&gt;  {query}
+ pixel (x : int, y : int, spectrum : const Spectrum&amp;) : void
+ bounds () : std::tuple&lt;int, int, int, int&gt;  {query}
+ spectrum_table_size () : size_t  {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>672</x>
      <y>378</y>
      <w>78</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IViewport*/
--
+ cast_ray (x : int, y : int) : std::optional&lt;Ray&gt;  {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>916</x>
      <y>362</y>
      <w>6</w>
      <h>62</h>
    </coordinates>
    <panel_attributes>lt=.&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;290.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>858</x>
      <y>362</y>
      <w>6</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>666</x>
      <y>364</y>
      <w>6</w>
      <h>48</h>
    </coordinates>
    <panel_attributes>lt=.&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;220.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>694</x>
      <y>364</y>
      <w>6</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>lt=.&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;70.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>732</x>
      <y>330</y>
      <w>76</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>360.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>732</x>
      <y>358</y>
      <w>64</w>
      <h>66</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>300.0;310.0;300.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>732</x>
      <y>344</y>
      <w>80</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>380.0;180.0;340.0;180.0;340.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>394</x>
      <y>314</y>
      <w>224</w>
      <h>152</h>
    </coordinates>
    <panel_attributes>halign=left
*geometry*
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>616</x>
      <y>358</y>
      <w>48</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;220.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>938</x>
      <y>358</y>
      <w>30</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>130.0;10.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>382</x>
      <y>294</y>
      <w>918</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>*core*</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>980</x>
      <y>452</y>
      <w>116</w>
      <h>64</h>
    </coordinates>
    <panel_attributes>//style=autoresize
*Redistributor*
--
- absorption_spectrum_m : Spectrum
- dispersion_function_m : Spectrum

- reflector_m : Reflector
- transmitter_m : std::optional&lt;Transmitter&gt;
--
+ &lt;&lt;constructor&gt;&gt; Redistributor (absorption_spectrum : const Spectrum&amp;,
                                                    dispersion_function : const Spectrum&amp;,
                                                    reflector : const Reflector&amp;,
                                                    transmitter : const std::optional&lt;Transmitter&gt;&amp;)

+ absorption_spectrum () : Spectrum {query}
+ dispersion_function () : Spectrum {query}

+ reflector () : Reflector {query}
+ transmitter () : std::optional&lt;Transmitter&gt; {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1042</x>
      <y>384</y>
      <w>6</w>
      <h>22</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>984</x>
      <y>384</y>
      <w>6</w>
      <h>72</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;340.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1040</x>
      <y>514</y>
      <w>6</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1072</x>
      <y>514</y>
      <w>110</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0;530.0;60.0;530.0;120.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1094</x>
      <y>404</y>
      <w>40</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;180.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1094</x>
      <y>454</y>
      <w>40</w>
      <h>6</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;180.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>666</x>
      <y>452</y>
      <w>104</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IImageSaver*/
--
+ save (image : const IImageTile&amp;, filename : std::string) : void {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>708</x>
      <y>440</y>
      <w>6</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>lt=.&gt;</panel_attributes>
    <additional_attributes>10.0;60.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>86</x>
      <y>756</y>
      <w>1216</w>
      <h>88</h>
    </coordinates>
    <panel_attributes>halign=left
*custom::render*
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>96</x>
      <y>772</y>
      <w>104</w>
      <h>24</h>
    </coordinates>
    <panel_attributes>style=autoresize
*SingleSimpleTile*
--
- image_m : std::vector&lt;std::vector&lt;Spectrum&gt;&gt;
- current_x_m : mutable int
- current_y_m : mutable int
--
+ SingleSimpleTile (width : int, height : int, spectrum_table_size : size_t)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>86</x>
      <y>670</y>
      <w>1216</w>
      <h>68</h>
    </coordinates>
    <panel_attributes>halign=left
*core::render*
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>138</x>
      <y>716</y>
      <w>6</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;280.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>224</x>
      <y>772</y>
      <w>84</w>
      <h>46</h>
    </coordinates>
    <panel_attributes>style=autoresize
*FixedToOriginPlaneViewport*
--
- width_m : double
- height_m : double
- width_res_m : int
- height_res_m : int
- horizontal_FOV_m : double
--
+ FixedToOriginPlaneViewport (width : double,
                                                      height : double,
                                                      width_res : int,
                                                      height_res : int,
                                                      horizontal_FOV : double)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>268</x>
      <y>698</y>
      <w>6</w>
      <h>78</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;370.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>328</x>
      <y>772</y>
      <w>138</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>style=autoresize
*PureRandomSampler*
--
- rnd_engine_m : mutable std::mt19937
- rnd_distribution_m : mutable std::uniform_real_distribution&lt;double&gt;
--
+ PureRandomSampler (seed : unsigned int)

- uniform_in_hemisphere_sample (normal_towards_incidence : const Vector&amp;) : Vector {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>392</x>
      <y>720</y>
      <w>66</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>310.0;10.0;310.0;140.0;10.0;140.0;10.0;260.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>640</x>
      <y>772</y>
      <w>32</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>style=autoresize
*PreviewPathtracer*
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>654</x>
      <y>722</y>
      <w>6</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;250.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>98</x>
      <y>684</y>
      <w>86</w>
      <h>34</h>
    </coordinates>
    <panel_attributes>style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IImageTile*/
--
+ next_pixel () : std::optional&lt; std::pair &lt;int, int&gt; &gt;  {query}
+ reset () : void
+ pixel (x : int, y : int) : std::optional&lt;Spectrum&gt;  {query}
+ pixel (x : int, y : int, spectrum : const Spectrum&amp;) : void
+ bounds () : std::tuple&lt;int, int, int, int&gt;  {query}
+ spectrum_table_size () : size_t  {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>232</x>
      <y>684</y>
      <w>78</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IViewport*/
--
+ cast_ray (x : int, y : int) : std::optional&lt;Ray&gt;  {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>418</x>
      <y>686</y>
      <w>104</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>//style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*ISampler*/
--
+ generate_sample (reflector : const Reflector&amp;,
                                  normal_towards_incidence : const Vector&amp;,
                                  specular_direction : const Vector&amp;) : Vector {query}

+ generate_sample (transmitter : const Transmitter&amp;,
                                   normal_towards_incidence : const Vector&amp;,
                                   specular_direction : const Vector&amp;) : Vector {query} </panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>922</x>
      <y>772</y>
      <w>86</w>
      <h>22</h>
    </coordinates>
    <panel_attributes>style=autoresize
*Ball*
--
- sphere_m : Sphere
- material_m : Material 
--
+ Ball (sphere : const Sphere&amp;, material : const Material&amp;)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>964</x>
      <y>724</y>
      <w>6</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;240.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1062</x>
      <y>724</y>
      <w>6</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;240.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1024</x>
      <y>772</y>
      <w>96</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>style=autoresize
*SimpleScene*
--
- scene_m : std::vector&lt; std::reference_wrapper&lt;IRaytraceable&gt; &gt;
--
+ add_object (object : IRaytraceable&amp;) : void</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>904</x>
      <y>862</y>
      <w>124</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>style=autoresize
*Sphere*
--
- center_m : Point
- radius_m : double
--
+ Sphere (center : const Point&amp;, radius : double)

+ ray_intersection (r : const Ray&amp;) : std::optional&lt; std::tuple&lt;Point, Vector&gt; &gt; {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>964</x>
      <y>792</y>
      <w>6</w>
      <h>74</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;350.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1070</x>
      <y>724</y>
      <w>6</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;240.0;10.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1154</x>
      <y>688</y>
      <w>104</w>
      <h>16</h>
    </coordinates>
    <panel_attributes>style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IImageSaver*/
--
+ save (image : const IImageTile&amp;, filename : std::string) : void {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1166</x>
      <y>772</y>
      <w>80</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>style=autoresize
*ToPNGSaver*
--
_- M_XYZ_to_RGB_s : const std::map&lt;std::string, Vector&gt;_

- XYZ_m : std::map&lt;std::string, Spectrum&gt;
--
+ ToPNGSaver (spectrum_table_size : size_t)

_- xf_XYZ (wavelength : double) : double_
_- yf_XYZ (wavelength : double) : double_
_- zf_XYZ (wavelength : double) : double_</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1204</x>
      <y>702</y>
      <w>6</w>
      <h>74</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;350.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>640</x>
      <y>688</y>
      <w>132</w>
      <h>36</h>
    </coordinates>
    <panel_attributes>//style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IPathtracer*/
--
+ trace (scene : const IRaytraceable&amp;,
              current : const std::optional&lt;const std::reference_wrapper&lt;const IRaytraceable&gt; &gt;,
              initial_ray : const Ray&amp;,
              sampler : const ISampler&amp;,
              spectrum_table_size : size_t,
              samples : int,
              depth : int) : Spectrum {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>946</x>
      <y>688</y>
      <w>142</w>
      <h>38</h>
    </coordinates>
    <panel_attributes>style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IRaytraceable*/
--
+ ray_intersection (r : const Ray&amp;) : std::optional&lt;std::tuple&lt;Point,
                                                                                                       const IRaytraceable&amp; &gt; &gt; {query}
                                                                                                       
+ probe_surface_data (r : const Ray&amp;) : std::optional&lt; std::tuple&lt;Point,
                                                                                                              Vector,
                                                                                                              Material,
                                                                                                              const IRaytraceable&amp; &gt; &gt; {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>794</x>
      <y>688</y>
      <w>68</w>
      <h>38</h>
    </coordinates>
    <panel_attributes>style=autoresize
/*&lt;&lt;interface&gt;&gt;*/
/*IRenderer*/
--
+ process (pathtracer : const IPathtracer&amp;,
                  scene : const IRaytraceable&amp;,
                  viewport : const IViewport&amp;,
                  sampler : const ISampler&amp;,
                  samples : int,
                  depth : int,
                  image : IImagetile&amp;) : void {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>814</x>
      <y>772</y>
      <w>28</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>style=autoresize
*SimpleRenderer*
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>826</x>
      <y>724</y>
      <w>6</w>
      <h>52</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;240.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>96</x>
      <y>812</y>
      <w>106</w>
      <h>18</h>
    </coordinates>
    <panel_attributes>style=autoresize
*SingleAdditiveTile*
--
+ pixel (x : int, y : int, spectrum : const Spectrum&amp;) : void
--
+ SingleAdditiveTile (width : int, height : int, spectrum_table_size : size_t)</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>142</x>
      <y>794</y>
      <w>6</w>
      <h>22</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;-</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;90.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>474</x>
      <y>772</y>
      <w>138</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>style=autoresize
*ImportanceSampler*
--
- rnd_engine_m : mutable std::mt19937
- uni_01_distribution_m : mutable std::uniform_real_distribution&lt;double&gt;
- uni_11_distribution_m : mutable std::uniform_real_distribution&lt;double&gt;
- norm_distribution_m : mutable std::normal_distribution&lt;double&gt;
- cos_distribution_m : mutable std::piecewise_linear_distribution&lt;double&gt;
--
+ ImportanceSampler (seed : unsigned int)

- uniform_in_hemisphere_sample (normal_towards_incidence : const Vector&amp;) : Vector {query}</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>486</x>
      <y>720</y>
      <w>60</w>
      <h>56</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;130.0;280.0;130.0;280.0;260.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>690</x>
      <y>772</y>
      <w>28</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>style=autoresize
*DepthPathtracer*
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>704</x>
      <y>722</y>
      <w>6</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;250.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>736</x>
      <y>772</y>
      <w>36</w>
      <h>10</h>
    </coordinates>
    <panel_attributes>style=autoresize
*ReflectionPathtracer*
--</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>750</x>
      <y>722</y>
      <w>6</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;&lt;.</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;250.0</additional_attributes>
  </element>
  <element>
    <id>UMLClass</id>
    <coordinates>
      <x>1124</x>
      <y>336</y>
      <w>152</w>
      <h>28</h>
    </coordinates>
    <panel_attributes>lt=.
style=autoresize
--
gaussian_petal (angle : double, spread : double) : double
lambertian_scatterer (angle : double) : double
critical_angle_of_TIR (n1 : double, n2 : double) : double
is_TIR (n1 : double, n2 : double, alpha : double) : bool
snell_law (n1 : double, n2 : double, alpha : double) : double
fresnel_intensity_coef (n1 : double, n2 : double, alpha : double, beta : double) : std::pair&lt;double, double&gt;</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLPackage</id>
    <coordinates>
      <x>892</x>
      <y>854</y>
      <w>168</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>halign=left
*custom::geometry*
--

</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLGeneric</id>
    <coordinates>
      <x>1166</x>
      <y>860</y>
      <w>78</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>symbol=component
/*&lt;&lt;external library&gt;&gt;*/

*PNGwriter*

PNGwriter is a C++ library for creating PNG images</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>1204</x>
      <y>810</y>
      <w>6</w>
      <h>54</h>
    </coordinates>
    <panel_attributes>lt=&lt;.</panel_attributes>
    <additional_attributes>10.0;250.0;10.0;10.0</additional_attributes>
  </element>
</diagram>
